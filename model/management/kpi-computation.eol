
import "./init-city.eol";

var city = new CityModel!City;
var kpi  = new KPIModel!KPI;

///// POPULATE THE MODEL CITY/////////
city.populateCity();
/////////////////////////////////////

/// KPI COMPUTATION///
kpi.cityName = city.name;
kpi.getAverageBandWidth(city);
kpi.getPercentHousesAccesToInternet(city);
kpi.getPercentHousesBadEnergyEfficiency(city);
kpi.getPercentHousesSmartElectricMeter(city);
//kpi.getPercentNetworkCoverageCity(city);
kpi.getSmartTransportLevelCity(city);
kpi.getPercentServicesAvailableEPayments(city);
kpi.getPercentServicesWebOrMobileApp(city);
kpi.getPercentServicesPublicWiFi(city);
////SHOW DATA FOR CONFIRMATION///////
kpi.println();
kpi.averageBandWidth.println();
kpi.percentHousesAccesToInternet.println();
kpi.percentHousesBadEnergyEfficiency.println();
kpi.percentHousesSmartElectricMeter.println();
kpi.percentServicesPublicWiFi.println();
kpi.percentServicesAvailableEPayments.println();
kpi.percentServicesWebOrMobileApp.println();
kpi.smartTransportLevelCity.println();
kpi.percentNetworkCoverageCity.println();
city.populateCity();
city.println();
///////////////////////////////////

operation KPIModel!KPI getAverageBandWidth(city:CityModel!City){
	var averageBandWidth = new KPIModel!IndicatorKPI;
	averageBandWidth.name = "BandWidth";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    averageBandWidth.labels = labels;
    /////// HERE THE COMPUTATION ////
    var exelentValue = 100.0; // Mbps
    var total = city.houses.size() + city.services.size();
    var sumBandWidth = 0.0;
    for (el in city.houses ){
    	sumBandWidth = el.hasInternetAccess ?  sumBandWidth + el.bandWidth : sumBandWidth; 
    }
    for (el in city.services){
    sumBandWidth = el.hasPublicWiFi ?  sumBandWidth + el.bandWidth : sumBandWidth; 
    } 
    var value = sumBandWidth / total;
    averageBandWidth.quantitiveValue = ((value / exelentValue) * 100).floor() + 0.0;
    /////////////////////////////
    if(value >= 0 and value <=20){
    	averageBandWidth.labelValue = "Bad";
    }else if(value > 20 and value <=60){
    	averageBandWidth.labelValue = "Regular";
    }else{
    	averageBandWidth.labelValue = "Good";
    }
    self.averageBandWidth = averageBandWidth;
    
}

operation KPIModel!KPI getPercentHousesAccesToInternet(city:CityModel!City){
	var percentHousesAccesToInternet = new KPIModel!IndicatorKPI;
	percentHousesAccesToInternet.name = "% of houses with Internet Access";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    percentHousesAccesToInternet.labels = labels;
    /////// HERE THE COMPUTATION ////
    var total = city.houses.size();
    var sum = 0.0;
    for (el in city.houses ){
    	sum = el.hasInternetAccess ?  sum + 1 : sum; 
    }
    var value = ((sum / total)*100).floor() + 0.0;
    percentHousesAccesToInternet.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <=49){
    	percentHousesAccesToInternet.labelValue = "Bad";
    }else if(value > 49 and value <=75){
    	percentHousesAccesToInternet.labelValue = "Regular";
    }else{
    	percentHousesAccesToInternet.labelValue = "Good";
    }
    self.percentHousesAccesToInternet = percentHousesAccesToInternet;
}

operation KPIModel!KPI getPercentHousesBadEnergyEfficiency(city:CityModel!City){
	var percentHousesBadEnergyEfficiency = new KPIModel!IndicatorKPI;
	percentHousesBadEnergyEfficiency.name = "% of houses with a Bad Energy Efficiency";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    percentHousesBadEnergyEfficiency.labels = labels;
    /////// HERE THE COMPUTATION ////
    var total = city.houses.size();
    var sum = 0.0;
    for (el in city.houses ){
    	sum = (el.electricalClass == 'D') or (el.electricalClass == 'E') ?  sum + 1 : sum; 
    }
    var value = ((sum / total)*100).floor() + 0.0;
    percentHousesBadEnergyEfficiency.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <=50){
    	percentHousesBadEnergyEfficiency.labelValue = "Good";
    }else if(value > 50 and value <=70){
    	percentHousesBadEnergyEfficiency.labelValue = "Regular";
    }else{
    	percentHousesBadEnergyEfficiency.labelValue = "Bad";
    }
    self.percentHousesBadEnergyEfficiency = percentHousesBadEnergyEfficiency;
}

operation KPIModel!KPI getPercentHousesSmartElectricMeter(city:CityModel!City){
	var percentHousesSmartElectricMeter = new KPIModel!IndicatorKPI;
	percentHousesSmartElectricMeter.name = "% of houses with a Smart Electrical Meter";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    percentHousesSmartElectricMeter.labels = labels;
    /////// HERE THE COMPUTATION ////
    var total = city.houses.size();
    var sum = 0.0;
    for (el in city.houses ){
    	sum = el.hasSmartElectricMeter ?  sum + 1 : sum; 
    }
    var value = ((sum / total)*100).floor() + 0.0;
    percentHousesSmartElectricMeter.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <=30){
    	percentHousesSmartElectricMeter.labelValue = "Bad";
    }else if(value > 30 and value <=60){
    	percentHousesSmartElectricMeter.labelValue = "Regular";
    }else{
    	percentHousesSmartElectricMeter.labelValue = "Good";
    }
    self.percentHousesSmartElectricMeter = percentHousesSmartElectricMeter;
}


//////////////// <---- HERE ADD YOUR FUNCTIONS -----> ///////////////////////////////

operation KPIModel!KPI getPercentServicesPublicWiFi(city:CityModel!City){
	var percentServicesPublicWiFi = new KPIModel!IndicatorKPI;
	percentServicesPublicWiFi.name = "% percent of Services which provide Public WiFi";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    percentServicesPublicWiFi.labels = labels;
    /////// HERE THE COMPUTATION ////
    var total = city.services.size();
    var sum = 0.0;
    for (el in city.services ){
    	sum = el.hasPublicWiFi ?  sum + 1 : sum; 
    }
    var value = ((sum / total)*100).floor() + 0.0;
    percentServicesPublicWiFi.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <=30){
    	percentServicesPublicWiFi.labelValue = "Bad";
    }else if(value > 30 and value <70){
    	percentServicesPublicWiFi.labelValue = "Regular";
    }else{
    	percentServicesPublicWiFi.labelValue = "Good";
    }
    self.percentServicesPublicWiFi = percentServicesPublicWiFi;
}

operation KPIModel!KPI getPercentServicesWebOrMobileApp(city:CityModel!City){
	var percentServicesWebOrMobileApp = new KPIModel!IndicatorKPI;
	percentServicesWebOrMobileApp.name = "% percent of Services with Web Site Or Mobile App";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    percentServicesWebOrMobileApp.labels = labels;
    /////// HERE THE COMPUTATION ////
    var total = city.services.size();
    var sum = 0.0;
    for (el in city.services ){
    	sum = el.hasWebOrMobileApp ?  sum + 1 : sum; 
    }
    var value = ((sum / total)*100).floor() + 0.0;
    percentServicesWebOrMobileApp.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <=30){
    	percentServicesWebOrMobileApp.labelValue = "Bad";
    }else if(value > 30 and value <=70){
    	percentServicesWebOrMobileApp.labelValue = "Regular";
    }else{
    	percentServicesWebOrMobileApp.labelValue = "Good";
    }
    self.percentServicesWebOrMobileApp = percentServicesWebOrMobileApp;
}

operation KPIModel!KPI getPercentServicesAvailableEPayments(city:CityModel!City){
	var percentServicesAvailableEPayments = new KPIModel!IndicatorKPI;
	percentServicesAvailableEPayments.name = "% percent of Services which allow to pay online or to pay with credit card";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    percentServicesAvailableEPayments.labels = labels;
    /////// HERE THE COMPUTATION ////
    var total = city.services.size();
    var sum = 0.0;
    for (el in city.services ){
    	sum = el.isAvailableEPayments ?  sum + 1 : sum; 
    }
    var value = ((sum / total)*100).floor() + 0.0;
    percentServicesAvailableEPayments.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <=30){
    	percentServicesAvailableEPayments.labelValue = "Bad";
    }else if(value > 30 and value <=70){
    	percentServicesAvailableEPayments.labelValue = "Regular";
    }else{
    	percentServicesAvailableEPayments.labelValue = "Good";
    }
    self.percentServicesAvailableEPayments = percentServicesAvailableEPayments;
}

operation KPIModel!KPI getSmartTransportLevelCity(city:CityModel!City){
	var smartTransportLevelCity = new KPIModel!IndicatorKPI;
	smartTransportLevelCity.name = "% Level of digitalization of the Transport City";
	var labels = new Sequence();
	for (attr in Sequence{"Good","Regular","Bad"}){
		var labelObj = new KPIModel!Label;
		labelObj.name = attr;
		labels.add(labelObj);
	}
    smartTransportLevelCity.labels = labels;
    /////// HERE THE COMPUTATION ////

    var total = 3;
    var sum = 0.0;
    
	sum = city.transportData.hasDynamicPublicTransitInformation ?  sum + 1 : sum; 
	sum = city.transportData.trafficMonitoring ?  sum + 1 : sum; 
	sum = city.transportData.intersectionControl ?  sum + 1 : sum;
    
    var value = ((sum / total)*100).floor() + 0.0;
    smartTransportLevelCity.quantitiveValue = value;
    /////////////////////////////
    if(value >= 0 and value <= 40){
    	smartTransportLevelCity.labelValue = "Bad";
    }else if(value > 40 and value <=70){
    	smartTransportLevelCity.labelValue = "Regular";
    }else{
    	smartTransportLevelCity.labelValue = "Good";
    }
    self.smartTransportLevelCity = smartTransportLevelCity;
}





//operation KPIModel!KPI getPercentNetworkCoverageCity(city:CityModel!City){
//	var percentNetworkCoverageCity = new KPIModel!IndicatorKPI;
//	percentNetworkCoverageCity.name = "% percent of Network Coverage of the City";
//	var labels = new Sequence();
//	for (attr in Sequence{"Good","Regular","Bad"}){
//		var labelObj = new KPIModel!Label;
//		labelObj.name = attr;
//		labels.add(labelObj);
//	}
//    percentNetworkCoverageCity.labels = labels;
//    /////// HERE THE COMPUTATION ////
//    /// TO DO
//    var value =  0.0;
//    percentNetworkCoverageCity.quantitiveValue = value;
//    /////////////////////////////
//    if(value >= 0 and value <=50){
//    	percentNetworkCoverageCity.labelValue = "Bad";
//    }else if(value > 50 and value <=80){
//    	percentNetworkCoverageCity.labelValue = "Regular";
//    }else{
//    	percentNetworkCoverageCity.labelValue = "Good";
//    }
//    self.percentNetworkCoverageCity = percentNetworkCoverageCity;
//}


